#!/usr/bin/env bash

set -eu
set -o pipefail

: ${DOTFILES_PATH:="$HOME/dotfiles"}
: ${DOTFILES_BRANCH:=master}
: ${UP_DRY_RUN:=}

ARGS=('')
for a in "$@"; do ARGS=(${ARGS[@]} "$a")
done

# Execute command or echo when in dry run mode
run() {
  if [ -n "$UP_DRY_RUN" ]; then
    echo "DRYRUN: $*"
  else
    "$@"
  fi
}


#=== Utils #==============================================================================================
compare_versions() {
  declare -a v1=(${1//./ })
  declare -a v2=(${2//./ })
  local i=""

  for (( i=${#v1[@]}; i<${#v2[@]}; i++ )); do
    v1[i]=0
  done

  for (( i=0; i<${#v1[@]}; i++ )); do
    if [[ -z ${v2[i]} ]]; then
      v2[i]=0
    fi

    if (( 10#${v1[i]} > 10#${v2[i]} )); then
      printf ">"
      return 0
    fi

    if (( 10#${v1[i]} < 10#${v2[i]} )); then printf "<"
      return 0
    fi
  done

  printf "="
}


#=== Steps
#==============================================================================================
print_header() {
  printf "\e[34m"
  echo '--------------------------------------------------------------------------------'
  echo '                                                                                '
  echo '                 888          888     .d888 d8b 888                             '
  echo '                 888          888    d88P"  Y8P 888                             '
  echo '                 888          888    888        888                             '
  echo '             .d88888  .d88b.  888888 888888 888 888  .d88b.  .d8888b            '
  echo '            d88" 888 d88""88b 888    888    888 888 d8P  Y8b 88K                '
  echo '            888  888 888  888 888    888    888 888 88888888 "Y8888b.           '
  echo '            Y88b 888 Y88..88P Y88b.  888    888 888 Y8b.          X88           '
  echo '             "Y88888  "Y88P"   "Y888 888    888 888  "Y8888   88888P"           '
  echo '                                                                                '
  echo '                           comfortable envs for you                             '
  echo '                                                                                '
  echo '                         github.com/hiramekun/dotfiles                          '
  echo '                                                                                '
  echo '--------------------------------------------------------------------------------'
  printf "\e[0m\n"
}

check_os() {
  local os="$(uname -s)"
  if [ "$os" = "Darwin" ]; then
    if [ $(compare_versions "$(sw_vers -productVersion)" "10.9") = '<' ]; then
      echo "Sorry, this script is intended only for OS X 10.9.0+"
      if [ -z "$UP_DRY_RUN" ]; then
        exit 1
      fi
    fi
  else
    echo "Sorry, this script is intended only for OS X"
    if [ -z "$UP_DRY_RUN" ]; then
      exit 1
    fi
  fi
}

clone_or_update_repo() {
  local git_dir="$DOTFILES_PATH/.git"

  if [ -d "$git_dir" ]; then
    echo 'Updating repo...'

    if [ "$(git --git-dir="$git_dir" symbolic-ref --short HEAD 2> /dev/null)" != "master" ]; then
      echo 'skip (working on a non-master branch)'
      return
    fi

    if ! git --git-dir="$git_dir" diff --no-ext-diff --quiet --exit-code > /dev/null 2>&1; then
      echo 'skip (unstaged changes present)'
      return
    fi

    if ! git --git-dir="$git_dir" diff-index --cached --quiet HEAD -- > /dev/null 2>&1; then
      echo 'skip (uncommitted changes present)'
      return
    fi

    if [ -n "$UP_DRY_RUN" ]; then
      echo 'DRYRUN: skip pulling repository'
    else
      git --git-dir="$git_dir" pull origin master
      git --git-dir="$git_dir" submodule sync
    fi
    echo 'done'
  elif ! [ -d "$DOTFILES_PATH" ]; then
    echo 'Cloning repo...'
    if [ -n "$UP_DRY_RUN" ]; then
      echo 'DRYRUN: skip cloning repository'
    else
      git clone --recursive git://github.com/creasty/dotfiles.git --branch $DOTFILES_BRANCH $DOTFILES_PATH
    fi
    echo 'done'
  fi
}

check_xcode_license_approved() {
  echo 'Agreeing to Xcode license...'

  if ! command -v xcrun > /dev/null 2>&1; then
    echo 'skip (xcrun not found)'
    return
  fi

  if [ -n "$UP_DRY_RUN" ]; then
    echo 'DRYRUN: skip xcode license check'
    return
  fi

  local has_error=0

  if ! [[ "$(/usr/bin/xcrun clang 2>&1 || true)" =~ 'license' ]]; then
    echo 'skip (already approved)'
    return
  fi

  sudo expect -c '
    set timeout 3
    spawn xcodebuild -license

    expect {
      timeout { exit 2 }

      -exact "for more" {
        send "G"
        exp_continue
      }

      -exact "agree, print, cancel" {
        send "agree\n"
        exp_continue
      }

      -exact "You can view the license agreements" {
        exit 0
      }
    }
  ' > /dev/null || has_error=1

  [ $has_error -eq 1 ] && sudo xcodebuild -license

  echo 'done'
}

load_env() {
  set +e
  source shell/env.sh
  local status=$?
  set -e
  if [ $status -ne 0 ]; then
    echo 'skip (failed to load env)'
  fi
}

install_homebrew() {
  command -v 'brew' > /dev/null 2>&1 && return

  if [ -n "$UP_DRY_RUN" ]; then
    echo 'DRYRUN: skip homebrew install'
    return
  fi

  echo 'Installing homebrew...'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  echo 'done'
}

brew_tap() {
  if [ -n "$UP_DRY_RUN" ]; then
    echo 'DRYRUN: skip brew tap'
    return
  fi
  brew tap AdoptOpenJDK/openjdk
}

install_ansible() {
  command -v 'ansible' > /dev/null 2>&1 && return

  if [ -n "$UP_DRY_RUN" ]; then
    echo 'DRYRUN: skip ansible install'
    return
  fi

  echo 'Installing ansible...'
  brew install ansible
  echo 'done'
}

run_provisioning() {
  echo 'Provisioning...'
  local script="$DOTFILES_PATH/provisioning/run.sh"
  if [ -n "$UP_DRY_RUN" ]; then
    if [ ! -x "$script" ]; then
      echo 'skip (provision script not found)'
    else
      PROVISION_DRY_RUN=1 "$script" "${ARGS[@]}" || true
    fi
  else
    "$script" "${ARGS[@]}"
  fi
  echo 'done'
}


#=== Entrypoint
#==============================================================================================
main() {
  print_header
  check_os
  clone_or_update_repo
  check_xcode_license_approved
  load_env
  install_homebrew
  brew_tap
  install_ansible
  run_provisioning
}

main
